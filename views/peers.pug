extends layout

block content
  script(defer=jsload_defer async=jsload_async type='text/javascript', src="https://cdnjs.cloudflare.com/ajax/libs/highcharts/6.2.0/highcharts.js")
  script(defer=jsload_defer async=jsload_async type='text/javascript', src="https://cdnjs.cloudflare.com/ajax/libs/highcharts/6.2.0/modules/exporting.js")
  script(defer=jsload_defer async=jsload_async type='text/javascript', src="https://cdnjs.cloudflare.com/ajax/libs/highcharts/6.2.0/modules/export-data.js")
  script(defer=jsload_defer async=jsload_async type='text/javascript', src="https://cdnjs.cloudflare.com/ajax/libs/highcharts/6.2.0/modules/heatmap.js")
  script(defer=jsload_defer async=jsload_async type='text/javascript', src="https://cdnjs.cloudflare.com/ajax/libs/highcharts/6.2.0/modules/treemap.js")
  script(defer=jsload_defer async=jsload_async type='text/javascript', src="https://cdnjs.cloudflare.com/ajax/libs/highcharts/6.2.0/modules/series-label.js")
  div
    ul.nav.nav-tabs(role='tablist')
      li.active(role='presentation')
        a(href='#peerslist', aria-controls='peerslist', role='tab', data-toggle='tab') ESN Peers List
      li(role='presentation')
        a(href='#locationChart', aria-controls='locationChart', role='tab', data-toggle='tab') Location Chart
      li(role='presentation')
        a(href='#exeChart', aria-controls='exeChart', role='tab', data-toggle='tab') Command Chart
      li(role='presentation')
        a(href='#versionChart', aria-controls='versionChart', role='tab', data-toggle='tab') Version Chart
      li(role='presentation')
        a(href='#osChart', aria-controls='osChart', role='tab', data-toggle='tab') OS Chart
      li(role='presentation')
        a(href='#compilerChart', aria-controls='compilerChart', role='tab', data-toggle='tab') Compiler Chart
    .tab-content
      #peerslist.tab-pane.active(role='tabpanel')
        h3 EtherSocialNetwork Peers info 피어 정보 목록
        table.table
          thead
            tr
              th Seq no
              th ID
              th Client
              th Version
              th OS
              th Go Ver.
              th IP
              th Port
              th Location
              th LastConnected
          tbody
            - var n = 1;
            for peer in peers
              tr
                td= n++
                td
                  a(href="#" title="Click for details" onclick="switchDetails('"+peer.id.substr(0, 20)+"');return false;") #{peer.id.substr(0, 20)}...
                  div(id=peer.id.substr(0, 20), style="width: 200px; margin: 0 auto; display: none;")
                    table.table
                      thead
                        tr
                          th key
                          th value
                      tbody
                        tr
                          td Id
                          td #{peer.id}
                        tr
                          td Host
                          td #{peer.ip}
                        tr
                          td Port
                          td #{peer.port}
                        tr
                          td Enode
                          td #{peer.enode}
                        tr
                          td Client id
                          td #{peer.name}
                        tr
                          td Client
                          td #{peer.exe}
                        tr
                          td Version
                          td #{peer.ver}
                        tr
                          td OS
                          td #{peer.os}
                        tr
                          td Last Connected
                          td #{peer.scantime}
                        tr
                          td Location
                          td #{peer.geo}
                td #{peer.exe}
                td #{peer.ver}
                td #{peer.os}
                td #{peer.gover}
                td #{peer.ip}
                td #{peer.port}
                td #{peer.geo}
                td #{peer.scantime}
      #locationChart.tab-pane(role='tabpanel')
        h3 EtherSocialNetwork Peers info 피어 정보 차트
        div#chart_geo(style="min-width: 300px; height: 600px; margin: 0 auto")
      #exeChart.tab-pane(role='tabpanel')
        h3 EtherSocialNetwork Peers info 피어 정보 차트
        div#chart_exe(style="min-width: 300px; height: 600px; margin: 0 auto")
      #versionChart.tab-pane(role='tabpanel')
        h3 EtherSocialNetwork Peers info 피어 정보 차트
        div#chart_ver(style="min-width: 300px; height: 600px; margin: 0 auto")
      #osChart.tab-pane(role='tabpanel')
        h3 EtherSocialNetwork Peers info 피어 정보 차트
        div#chart_os(style="min-width: 300px; height: 600px; margin: 0 auto")
      #compilerChart.tab-pane(role='tabpanel')
        h3 EtherSocialNetwork Peers info 피어 정보 차트
        div#chart_gover(style="min-width: 300px; height: 600px; margin: 0 auto")
  script.
    const opt_chart = {
      polar: false,
      plotBackgroundColor: null,
      plotBorderWidth: null,
      plotShadow: false,
      type: 'pie'
    };
    const opt_tooltip = {
      pointFormat: '{series.name}: <b>{point.y} peers, {point.percentage:.1f}%</b>',
      enabled: true,
    };
    const opt_plotOptions = {
      pie: {
        allowPointSelect: true,
        cursor: 'pointer',
        showInLegend: true,
        dataLabels: {
          enabled: true,
          format: '<b>{point.name}</b>: {point.y} peers, {point.percentage:.1f} %',
          style: {
            color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
          }
        }
      }
    };
    const opt_legend = {
      align: 'right',
      verticalAlign: 'top',
      layout: 'vertical',
      x: 0,
      y: 100,
      useHTML: true,
      labelFormatter: function() {
        return '<b>'+this.name+'</b>: '+this.y+' peers';
      }
    };

    var commandsSeries = resSortedReturn(!{commands});
    var versionSeries = resSortedReturn(!{versions});
    var osSeries = resSortedReturn(!{oss});
    var goVersionSeries = resSortedReturn(!{goversions});
    var geoSeries = resSortedReturn(!{geo});

    Highcharts.chart('chart_exe', makeChartProperty('EXE Chart', 'exe', commandsSeries));
    Highcharts.chart('chart_ver', makeChartProperty('Version Chart', 'Version', versionSeries));
    Highcharts.chart('chart_os', makeChartProperty('OS Chart', 'OS', osSeries));
    Highcharts.chart('chart_gover', makeChartProperty('Compiler Chart', 'Compiler', goVersionSeries));
    //Highcharts.chart('chart_geo', makeChartProperty('Location Chart', 'Location', geoSeries));

    var categories = !{geoCategories}.categories,
      data = !{geoCategories}.data,
      countryData = [],
      cityData = [],
      i,
      j,
      dataLen = data.length,
      drillDataLen,
      brightness;

    // Build the data arrays
    for (i = 0; i < dataLen; i += 1) {
      // add browser data
      countryData.push({
        name: categories[i],
        y: data[i].y,
        color: data[i].color
      });

      // add version data
      drillDataLen = data[i].drilldown.data.length;
      for (j = 0; j < drillDataLen; j += 1) {
        brightness = 0.25 - (((j + 1) / (drillDataLen + 1)) * 0.25);
        cityData.push({
          name: data[i].drilldown.categories[j],
          y: data[i].drilldown.data[j],
          color: Highcharts.Color(data[i].color).brighten(brightness).get()
        });
      }
    }

    // Create the chart
    Highcharts.chart('chart_geo', {
      chart: {
        type: 'pie'
      },
      title: {
        text: 'Location Chart'
      },
      yAxis: {
        title: {
          text: 'number of Location'
        }
      },
      plotOptions: {
        pie: {
          shadow: false,
          center: ['50%', '50%']
        }
      },
      tooltip: {
        valueSuffix: 'peers'
      },
      series: [{
        name: 'Country',
        data: countryData,
        size: '50%',
        dataLabels: {
          formatter: function () {
            return this.y > 1 ? this.point.name : null;
          },
          color: '#ffffff',
          distance: -30
        }
      }, {
        name: 'City',
        data: cityData,
        size: '90%',
        innerSize: '50%',
        dataLabels: {
          formatter: function () {
            // display only if larger than 1
            return this.y > 1 ? '<b>' + this.point.name + ':</b> ' + this.y + 'peers' : null;
          }
        },
        id: 'city'
      }],
      exporting: {
        enabled: true
      },
      credits: {
        enabled: true
      },
      legend: {
        align: 'right',
        verticalAlign: 'top',
        layout: 'vertical',
        x: 0,
        y: 100,
        useHTML: true,
        labelFormatter: function() {
          return '<b>'+this.name+'</b>: '+this.y+' peers';
        }
      },
      plotOptions: {
        pie: {
          allowPointSelect: true,
          cursor: 'pointer',
          showInLegend: true
        }
      },
      responsive: {
        rules: [{
          condition: {
            maxWidth: 400
          },
          chartOptions: {
            series: [{
              id: 'city',
              dataLabels: {
                enabled: false
              }
            }]
          }
        }]
      }
    });

    function switchDetails(target){
      const divById = document.getElementById(target);
      if(divById.style.display == 'none') {
        divById.style.display = 'block';
      } else {
        divById.style.display = 'none';
      }
    }
    function resSortedReturn(arr) {
      arr.sort(function (a, b) {
        if (a.y > b.y) {
          return -1;
        }
        if (a.y < b.y) {
          return 1;
        }
        return 0;
      });
      return arr;
    }

    function makeChartProperty(title, seriesName, seriesData) {
      var res = {
        chart: opt_chart,
        title: {
          text: title
        },
        legend: opt_legend,
        tooltip: opt_tooltip,
        plotOptions: opt_plotOptions,
        exporting: {
          enabled: true
        },
        credits: {
          enabled: true
        },
        series: [{
          animation: false,
          name: seriesName,
          colorByPoint: true,
          data: seriesData
        }]
      };
      return res;
    }