extends layout

block content
  script(defer=jsload_defer async=jsload_async type='text/javascript', src="https://cdnjs.cloudflare.com/ajax/libs/highcharts/6.2.0/highcharts.js")
  script(defer=jsload_defer async=jsload_async type='text/javascript', src="https://cdnjs.cloudflare.com/ajax/libs/highcharts/6.2.0/modules/exporting.js")
  script(defer=jsload_defer async=jsload_async type='text/javascript', src="https://cdnjs.cloudflare.com/ajax/libs/highcharts/6.2.0/modules/export-data.js")
  script(defer=jsload_defer async=jsload_async type='text/javascript', src="https://cdnjs.cloudflare.com/ajax/libs/highcharts/6.2.0/modules/heatmap.js")
  script(defer=jsload_defer async=jsload_async type='text/javascript', src="https://cdnjs.cloudflare.com/ajax/libs/highcharts/6.2.0/modules/treemap.js")
  script(defer=jsload_defer async=jsload_async type='text/javascript', src="https://cdnjs.cloudflare.com/ajax/libs/highcharts/6.2.0/modules/series-label.js")
  script(defer=jsload_defer async=jsload_async type='text/javascript', src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js")
  script(defer=jsload_defer async=jsload_async type='text/javascript', src="https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.13/moment-timezone-with-data-2012-2022.min.js")
  h3 Block Chain Summary(Calculated in the All blocks) / Total number of TX: #{numberformatter(totalTxCount)}
  div#chart_BlockTime(style="min-width: 480px; max-width: 1200px; height: 1100px; margin: 0 auto")
  script.
    Highcharts.setOptions({
      time: {
          timezone: 'Asia/Seoul'
      }
    });

    $('#chart_BlockTime').bind('mousemove touchmove touchstart', function (e) {
      var chart, point, i, event;
      for (i = 0; i < Highcharts.charts.length; i++) {
        chart = Highcharts.charts[i];
        // Find coordinates within the chart
        event = chart.pointer.normalize(e.originalEvent);
        // Get the hovered point
        point = chart.series[0].searchPoint(event, true);
        if (point) {
          point.highlight(e);
        }
      }
    });
    /**
    * Override the reset function, we don't need to hide the tooltips and
    * crosshairs.
    */
    Highcharts.Pointer.prototype.reset = function () {
      return undefined;
    };

    /**
    * Highlight a point by showing tooltip, setting hover state and draw crosshair
    */
    Highcharts.Point.prototype.highlight = function (event) {
      event = this.series.chart.pointer.normalize(event);
      this.onMouseOver(); // Show the hover marker
      this.series.chart.tooltip.refresh(this); // Show the tooltip
      this.series.chart.xAxis[0].drawCrosshair(event, this); // Show the crosshair
    };

    /**
    * Synchronize zooming through the setExtremes event handler.
    */
    function syncExtremes(e) {
      var thisChart = this.chart;
      if (e.trigger !== 'syncExtremes') { // Prevent feedback loop
        Highcharts.each(Highcharts.charts, function (chart) {
          if (chart !== thisChart) {
            if (chart.xAxis[0].setExtremes) { // It is null while updating
              chart.xAxis[0].setExtremes(
                e.min,
                e.max,
                undefined,
                false,
                {
                  trigger: 'syncExtremes'
                }
              );
            }
          }
        });
      }
    }

    // Get the data. The contents of the data file can be viewed at
    var nodeDatas = !{JSON.stringify(activity)};
    $.each(nodeDatas.datasets, function (i, dataset) {
      // Add X values
      dataset.data = Highcharts.map(dataset.data, function (val, j) {
        return {x:nodeDatas.xData[j], y:val, b:nodeDatas.xBlocknumber[j], n:nodeDatas.xNumberOfBlocks[j]};
      });

      $('<div style="min-width: 480px; max-width: 1200px; height: 250px; margin: 0 auto">')
        .appendTo('#chart_BlockTime')
        .highcharts({
          chart: {
            marginLeft: 40, // Keep all charts left aligned
            spacingTop: 20,
            spacingBottom: 20,
            spacingRight: 30,
            zoomType: 'x'
          },
          title: {
            text: dataset.name,
            align: 'right',
            margin: 0,
            x: 10
          },
          credits: {
            enabled: true
          },
          exporting: {
            enabled: false
          },
          legend: {
            enabled: false
          },
          xAxis: {
            type: 'datetime',
            dateTimeLabelFormats: {
              millisecond: '%H:%M:%S.%L',
              second: '%H:%M:%S',
              minute: '%y/%m/%d %H:%M',
              hour: '%y/%m/%d %H:%M',
              day: '%y/%m/%d',
              week: '%y/%m/%d',
              month: '%y/%m',
              year: '%Y'
            },
            events: {
              setExtremes: syncExtremes
            }
          },
          yAxis: {
            title: {
              text: null
            }
          },
          tooltip: {
            positioner: function () {
              return {
                // right aligned
                x: 30,
                y: 10 // align to title
              };
            },
            borderWidth: 0,
            backgroundColor: 'none',
            pointFormat: '{point.y}',
            formatter: function() {
              return 'BlockNumber: <b>' + (this.point.b-this.point.n+1).toLocaleString() + ' ~ ' + this.point.b.toLocaleString() + '</b> (' + Highcharts.dateFormat('%y/%m/%d %H:%M', new Date(this.x)) + ' ~ ' + Highcharts.dateFormat('%y/%m/%d %H:%M', new Date(this.x+(60*60*1*1000+60*59*1000+59*1000))) + ')<br/>NumberOfBlocks: <b>' + this.point.n.toLocaleString() + "   |   " + dataset.name + ": <b>" + this.y.toLocaleString(undefined, {maximumFractionDigits: dataset.valueDecimals}) + dataset.unit + '</b>';
            },
            headerFormat: '',
            shadow: false,
            style: {
              fontSize: '15px'
            }
          },
          series: [{
            turboThreshold: !{xDataLength},
            data: dataset.data,
            lineWidth: 1,
            name: dataset.name,
            type: dataset.type,
            color: Highcharts.getOptions().colors[i==2?4:i],
            fillOpacity: 0.5,
            tooltip: {
              valueSuffix: ' ' + dataset.unit
            }
          }]
        });
    });