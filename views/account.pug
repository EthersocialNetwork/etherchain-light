extends layout

block content
  link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.19/css/dataTables.bootstrap.min.css')
  script(type='text/javascript', src='https://cdnjs.cloudflare.com/ajax/libs/gojs/1.8.32/go.js')
  script(type='text/javascript', src='/GoJS-1.8.32/extensions/HyperlinkText.js')
  script(type='text/javascript', src='https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.19/js/jquery.dataTables.min.js')
  script(type='text/javascript', src='https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.19/js/dataTables.bootstrap.min.js')
  if account.isContract
    h3 Contract #{account.address}
  else
    h3 Account #{account.address}
  table.table
    if account.token_name
      tr
        td
          h3 Token Name:
        td
          h3 #{account.token_name}
    if account.name
      tr
        td
          h3 Name:
        td
          h3 #{account.name}
    if account.token_totalSupply
      tr
        td
          h3 Total Supply:
        td
          h3 #{tokenformatter.format(account.token_totalSupply, account.token_decimals, account.token_symbol)}
    else
      tr
        td
          h3 Balance:
        td
          h3 #{ethformatter(account.balance)}
    tr
      td Block Range:
      td 
        if account.previousBlockNumber > 999
          a.btn.btn-primary.btn-sm(href="/account/" + account.address + "/" + account.previousBlockNumber + "/" + account.max_blocks, style="padding: 4px;") Previous
          | &nbsp;&nbsp;&nbsp;&nbsp;from:#{numberformatter(account.fromBlock)} ~ to:#{numberformatter(account.lastBlock)} 정보 추출 범위 &nbsp;&nbsp;&nbsp;&nbsp;
          a.btn.btn-primary.btn-sm(href="/account/" + account.address, style="padding: 4px;") Lastest
        else
          |from:#{numberformatter(account.fromBlock)} ~ to:#{numberformatter(account.lastBlock)} 정보 추출 범위 &nbsp;&nbsp;&nbsp;&nbsp;
          a.btn.btn-primary.btn-sm(href="/account/" + account.address, style="padding: 4px;") Lastest
    tr
      td More Infomation:
      td
        a(href=account.officialurl target='_blank') Official BlockExplorer(Previous information) 공식 익스플로러(범위 이전 정보 조회)
    if countBlocks < 1 && !account.isContract
      tr
        td
          h5 Notice:
        td
          h5 No transactions within that block range. 해당 블록 범위 내에서 트랜잭션이 없습니다.
  div
    ul.nav.nav-tabs(role='tablist')
      if account.isContract
        li.active(role='presentation')
          a(href='#transactions', aria-controls='transactions', role='tab', data-toggle='tab') Transactions
        li(role='presentation')
          a(href='#code', aria-controls='code', role='tab', data-toggle='tab') Code
        li(role='presentation')
          a(href='#contractState', aria-controls='source', role='tab', data-toggle='tab') Contract State
      else
        li.active(role='presentation')
          a(href='#tracemap', aria-controls='tracemap', role='tab', data-toggle='tab') Transactions Tracing
        li(role='presentation')
          a(href='#transactions', aria-controls='transactions', role='tab', data-toggle='tab') Transactions
      if account.isContract
        //
      else
        li(role='presentation')
          a(href='#txlist', aria-controls='txlist', role='tab', data-toggle='tab') All transactions
      if account.tokens
        li(role='presentation')
          a(href='#tokens', aria-controls='tokens', role='tab', data-toggle='tab') Token Balance
      if account.tokenBlocks
        li(role='presentation')
          a(href='#tokentransactions', aria-controls='tokentransactions', role='tab', data-toggle='tab') Token Transactions
    .tab-content
      if account.isContract
        //
      else
        #tracemap.tab-pane.active(role='tabpanel')
          #sample
            #myDiagramDiv(style='border: solid 1px black; width: 100%; height: 1000px')
      if account.tokens
        #tokens.tab-pane(role='tabpanel')
          h4 Token Balance
          table.table
            thead
              tr
                th Name
                th Balance
                th Contract Address
            tbody
              for item in account.tokens
                if item.balance
                  tr
                    td #{item.name}
                    td(align="right") #{tokenformatter.format(item.balance.balance, item.decimals, item.symbol)}
                    td
                      a(href="/account/" + item.account target='_blank') #{item.account}
      if account.isContract
        #transactions.tab-pane.active(role='tabpanel')
          h3 Recent Activity 최근 활동 내역
          table.table
            thead
              tr
                th Hash
                th Block
                th Date
                th Type
                th From
                th To
                th Amount
            tbody
                for event in account.contractEvents
                  if event.event === "Transfer"
                    tr
                      td
                        a(href="/tx/" + event.transactionHash) #{event.transactionHash.substr(0, 10)}...
                      td
                        a(href="/block/" + event.blockNumber) #{event.blockNumber}
                      td
                        //#{moment(event.timestamp * 1000).format()} (#{moment(event.timestamp * 1000).fromNow()})
                        |#{event.timestamp}
                      td
                        //a(href="/event/" + event._id) #{event.event}
                        |#{event.event}
                      td
                        a(href="/account/" + event.args._from) #{event.args._from}
                      td
                        a(href="/account/" + event.args._to) #{event.args._to}
                      td(align="right") #{tokenformatter.format(event.args._value, account.token_decimals, account.token_symbol)}
                  if event.event === "Approval"
                    tr
                      td
                        a(href="/tx/" + event.transactionHash) #{event.transactionHash.substr(0, 10)}...
                      td
                        a(href="/block/" + event.blockNumber) #{event.blockNumber}
                      td
                        //a(href="/event/" + event._id) #{event.event}
                        |#{event.timestamp}
                      td
                        |#{event.event}
                      td
                        a(href="/account/" + event.args._owner) #{event.args._owner}
                      td
                        a(href="/account/" + event.args._spender) #{event.args._spender}
                      td(align="right") #{tokenformatter.format(event.args._value, account.token_decimals, account.token_symbol)}
      else
        #transactions.tab-pane(role='tabpanel')
          h3 Recent Activity 최근 활동 내역
          table.table
            thead
              tr
                th Hash
                th Block
                th Type
                th
                th From
                th To
                th Amount
                th isContract
            tbody
              for block in account.blocks
                for trace in block
                  if trace.type === "reward" && trace.action.author === account.address
                    tr
                      td
                        a(href="/block/" + trace.blockNumber) #{trace.blockHash.substr(0, 10)}...
                      td
                        a(href="/block/" + trace.blockNumber) #{trace.blockNumber}
                      if trace.action.rewardType === "uncle"
                        td Mining Reward(Uncle)
                      else
                        td Mining Reward
                      td
                        span.glyphicon.glyphicon-gift(style="color: blue;")
                      td New Coins
                      td 
                        a(href="/account/" + trace.action.author) #{nameformatter.format(trace.action.author)}
                      td(align="right") #{ethformatter(trace.action.value)}
                      td #{trace.isContract}
                  else if trace.type !== "reward"
                    tr            
                      td 
                        a(href="/tx/" + trace.transactionHash)  #{trace.transactionHash.substr(0, 10)}...
                      td
                        a(href="/block/" + trace.blockNumber) #{trace.blockNumber}
                      td.capitalize
                        if trace.error
                          span(style="color: red", data-toggle="tooltip", data-placement="left", title=trace.error).glyphicon.glyphicon-warning-sign
                        |  #{trace.type}
                      if trace.type === "call"
                        td
                          if trace.calltype === "to"
                            span.glyphicon.glyphicon-log-in(style="color: green;")
                          else if trace.calltype === "from"
                            span.glyphicon.glyphicon-log-out(style="color: red;")
                          else
                            span.glyphicon.glyphicon-new-window(style="color: blue;")
                        td
                          a(href="/account/" + trace.action.from) #{nameformatter.format(trace.action.from)}
                        td 
                          if trace.action._to !== ''
                            a(href="/account/" + trace.action._to) #{nameformatter.format(trace.action._to)}
                          else
                            a(href="/account/" + trace.action.to) #{nameformatter.format(trace.action.to)}
                        if trace.action._value !== ''
                          td(align="right") #{tokenformatter.format(trace.action._value, trace.token_decimals, trace.token_symbol)}
                        else
                          td(align="right") #{ethformatter(trace.action.value)}
                        td #{trace.isContract}
                      else if trace.type === "create"
                        td
                          span.glyphicon.glyphicon-asterisk(style="color: blue;")
                        td
                          a(href="/account/" + trace.action.from) #{nameformatter.format(trace.action.from)}
                        td
                          a(href="/account/" + trace.result.address) #{nameformatter.format(trace.result.address)}
                        td(align="right") #{tokenformatter.format(trace.action.value, trace.token_decimals, trace.token_symbol)}
                        td #{trace.isContract}
                      else if trace.type === "suicide"
                        td
                          if trace.action.address === account.address
                            span.glyphicon.glyphicon-export(style="color: red;")
                          else
                            span.glyphicon.glyphicon-import(style="color: green;")
                        td
                          a(href="/account/" + trace.action.address) #{nameformatter.format(trace.action.address)}
                        td
                          a(href="/account/" + trace.action.refundAddress) #{nameformatter.format(trace.action.refundAddress)}
                        td(align="right") #{ethformatter(trace.action.balance)}
                        td #{trace.isContract}
        if account.tokenBlocks
          #tokentransactions.tab-pane(role='tabpanel')
            h3 Recent Token Activity 최근 토큰 활동 내역
            table.table
              thead
                tr
                  th Hash
                  th Block
                  th Date
                  th Type
                  th
                  th From
                  th To
                  th Amount
              tbody
                for block in account.tokenBlocks
                  for trace in block
                    tr
                      td 
                        a(href="/tx/" + trace.transactionHash)  #{trace.transactionHash.substr(0, 10)}...
                      td
                        a(href="/block/" + trace.blockNumber) #{trace.blockNumber}
                      td
                        | #{moment(trace.timestamp * 1000).format("z YY/MM/DD HH:mm:ss")}
                      td.capitalize
                        | #{trace.event}
                      td
                        if trace.args._from === trace.args._to
                          span.glyphicon.glyphicon-resize-horizontal(style="color: blue;")
                        else if trace.args._from === account.address
                          span.glyphicon.glyphicon-log-out(style="color: red;")
                        else
                          span.glyphicon.glyphicon-log-in(style="color: green;")
                      td
                        a(href="/account/" + trace.args._from) #{nameformatter.format(trace.args._from)}
                      td
                        a(href="/account/" + trace.args._to) #{nameformatter.format(trace.args._to)}
                      td(align="right") #{tokenformatter.format(trace.args._value, trace.token_decimals, trace.token_symbol)}
        if account.isContract
          //
        else
          #txlist.tab-pane(role='tabpanel')
            h3 All transactions 모든 활동 내역
            div(style='width:95%')
              table#txlisttable.table.table-striped.table-bordered(style='width:100%')
                thead
                  tr
                    th Hash
                    th Block
                    th Date
                    th Type
                    th From
                    th To
                    th Amount
                    //th isContract
      if account.isContract
        #code.tab-pane(role='tabpanel')
          h3 Code
          //if !account.source
            a(href="/contract/verify") Upload source
          pre #{account.code}
          if account.wast
            h3 Wast code
            pre #{account.wast}
          h3 Storage
          pre #{JSON.stringify(account.storage)}
        #contractState.tab-pane(role='tabpanel')
          h4 Current contract state
          table.table
            thead
              tr
                th Function
                th Result
            tbody
              for item in account.contractState
                tr
                  td #{item.name}
                  td #{item.result}
      if account.source
        #source.tab-pane(role='tabpanel')
          h4 Source
          pre #{account.source.source}
          h4 ABI
          pre #{account.source.abi}
          h4 Constructor
          pre #{account.source.constructorArgs}
  //script#code
  if account.isContract
    //
  else
    script.
      $(document).ready(function() {
        $('#txlisttable').DataTable({
            "processing": true,
            "serverSide": true,
            "ajax": {
              "url": "/account/transactions/!{account.address}/query",
              "type": "POST"
            },
            "searching": false,
            "order": [[ 2, "desc" ]],
            "columnDefs": [{
              "targets": 0,
              "orderable": false,
              "render": function ( data, type, row, meta ) {
                if(row[3]=='call')
                  return '<a href="/tx/'+data+'">'+data.substr(0, 10)+'...</a>';
                else
                  return '<a href="/block/'+data+'">'+data.substr(0, 10)+'...</a>';
              }
            },{
              "targets": 1,
              "orderable": false,
              "render": function ( data, type, row, meta ) {
                return '<a href="/block/'+data+'">'+data.replace(/\B(?=(\d{3})+(?!\d))/g, ",")+'</a>';
              }
            },{
              "targets": 2,
              "orderable": false
            },{
              "targets": 3,
              "orderable": false
            },{
              "targets": 4,
              "orderable": false,
              "render": function ( data, type, row, meta ) {
                if(data.length == 42)
                  return '<a href="/account/'+data+'">'+data+'</a>';
                else
                  return data;
              }
            },{
              "targets": 5,
              "orderable": false,
              "render": function ( data, type, row, meta ) {
                return '<a href="/account/'+data+'">'+data+'</a>';
              }
            },{
              "targets": 6,
              "orderable": false,
              "className": "text-right",
            }]
        });
      });
      (function() {
        function async_load() {
          //if (window.goSamples) goSamples();  // init for these samples -- you don't need to call this
          var $ = go.GraphObject.make;  // for conciseness in defining templates
          myDiagram = $(go.Diagram, "myDiagramDiv",  // must name or refer to the DIV HTML element
            {
              initialAutoScale: go.Diagram.Uniform,  // an initial automatic zoom-to-fit
              contentAlignment: go.Spot.Center,  // align document to the center of the viewport
              layout:
                $(go.ForceDirectedLayout,  // automatically spread nodes apart
                  { maxIterations: 200, defaultSpringLength: 100, defaultElectricalCharge: 200 })
            });
          // define each Node's appearance
          myDiagram.nodeTemplate = 
            $(go.Node, "Auto",  // the whole node panel
              { locationSpot: go.Spot.Center },
              // define the node's outer shape, which will surround the TextBlock
              $(go.Shape, "RoundedRectangle", { fill: $(go.Brush, "Linear", { 0: "#008cba", 1: "#99d2e5" }), stroke: "#008cba" }),
              $("HyperlinkText",
                function(node) { return node.data.text=="Mining"?"http://pool.sejun.info/":"http://!{hostname}/account/" + node.data.text; },
                function(node) { return node.data.text.substr(0, 10).concat("..."); },
                { font: "bold 10pt helvetica, bold arial, sans-serif", stroke: "white", margin: 4 }
              )
            );
          // replace the default Link template in the linkTemplateMap
          myDiagram.linkTemplate =
            $(go.Link,  // the whole link panel
              { curve: go.Link.Bezier, adjusting: go.Link.Stretch, reshapable: true },
              $(go.Shape,  // the link shape
                { stroke: "gray" }),
              $(go.Shape,  // the arrowhead
                { toArrow: "standard", stroke: null }),
              $(go.TextBlock,  // the label text
                { textAlign: "center", font: "bold 9pt helvetica, arial, sans-serif", stroke: "black", margin: 4, segmentIndex: 2, segmentFraction: 0.2, segmentOffset: new go.Point(0, 10)},
                new go.Binding("text", "text"))
            );
          // create the model for the concept map
          //console.log(!{nodedata});
          //console.log(!{linkdata});
          var nodeDataArray = !{nodedata};
          var linkDataArray = !{linkdata};
          myDiagram.model = new go.GraphLinksModel(nodeDataArray, linkDataArray);
        }
        window.attachEvent ? window.attachEvent('onload', async_load) : window.addEventListener('load', async_load, false);
      })();
